[use "os"]
[use "random"]

[var __repo::validate_url [lambda [url] [block

    [yield 1]
]]]

[var __repo::generate_disk_name [lambda [] [block
    [yield [fmt.join [list 
        "dino-clone-"
        [random.alpha_string 25]
    ]]]
]]]

[var repo::obtain [lambda [url] [block

    [if [0 == [__repo::validate_url url]] [block
        [putln "Given item is not a valid url: " url]
        [exit 1]
    ]]

    [try
        [block 
            [use "git"]
        ]
        [block
            [putln "Failed to load `git`: " $]
            [exit 1]
        ]
    ]

    [var cwd [os.cwd]]
    [os.chdir sys.sauros_home]

    [os.chdir "./pkgs"]
    [var packages_dir [os.cwd]]

    [os.chdir sys.sauros_home]

    [var exit_error [lambda [msg] [block
        [putln msg]
        [exit 1]
    ]]]

    [if [not [os.is_dir "./staging"]] [block
        [exit_error [fmt.join [list
            "`staging` does not exist within SAUROS_HOME"
            " please create this directory before continuing"
        ]]]
    ]]

    [os.chdir "./staging"]

    [var repo_disc_loc [__repo::generate_disk_name]]

    [put "Attempting to retrieve :" url " ... "]
    [if [not [git.clone url repo_disc_loc]] [block
        [putln "FAIL"]
        [exit_error "Failed to clone target"]
    ]] 
    [putln "COMPLETE"]

    [os.chdir repo_disc_loc]
    [var repo_full_path [os.cwd]]

    [if [not [os.is_file "dino.saur"]] [block
        [exit_error "Repository does not contain a `dino.saur` file"]
    ]]

    [try
        [block
            [import "dino.saur"]

            [if [sneq "list" [type packages]] [block
                [exit_error "Expected `packages` variable to be of type `list`"]
            ]]

            [iter package packages [block
                [if [sneq "string" [type package]] [block
                    [exit_error "Expected all items in `packages` list to be of type `string`"]
                ]]
            
                [if [not [os.is_dir package]] [block
                    [exit_error 
                        [fmt.join 
                            [list "Expected listed package `" package "` to be a directory"]]]
                ]]

                [var new_package_data [sys.load_and_validate_package_dir package]]

                [if [not new_package_data.is_valid] [block
                    [exit_error 
                        [fmt.join 
                            [list "Given directory `" package "` is not a valid sauros package"]]]
                ]]

                [put package " seems to be a valid package. Installing ..."]

                [os.chdir packages_dir]

                [if [os.is_dir package] [block
                    [putln "`" package "` already exists. Replace it?"]
                    [var choice [io.get_string "[y/N] >"]]
                    [if [or [seq "y" choice] 
                            [seq "yes" choice]]
                        [block
                            [os.delete_all package]
                    ]]
                ]]

                [os.mkdir package]
                [os.chdir package]
                [var dest_loc [os.cwd]]

                [os.chdir repo_full_path]

                [if [not [os.copy package dest_loc]] [block
                    [exit_error [fmt.join [list "Failed to copy package to: " dest_loc]]]
                ]]
                [putln "COMPLETE"]

                [putln "Checking if package needs to be built ..."]
                [build::package dest_loc]
                [putln "COMPLETE"]
            ]]
        ]
    
        ; Try failed
        [block
            [exit_error [fmt.join [list "Failed to validate `dino.saur` file: " $]]]
        ]
    ]
]]]